#!/usr/bin/env python3
"""
Formatters module for Telegram Remote Monitoring & Management Bot
"""

import textwrap
from datetime import timedelta
from typing import List

from modules.system_monitor import SystemStatus, ProcessInfo, DockerInfo, NetworkInfo

# ----------------------------------------------------------------------------
# Formatting helpers
# ----------------------------------------------------------------------------

def fmt_bytes(num: int, suffix: str = "B") -> str:
    # human readable
    for unit in ['','K','M','G','T','P','E','Z']:
        if abs(num) < 1024.0:
            return f"{num:3.1f}{unit}{suffix}"
        num /= 1024.0
    return f"{num:.1f}Y{suffix}"

def fmt_timedelta(td: timedelta) -> str:
    secs = int(td.total_seconds())
    days, secs = divmod(secs, 86400)
    hrs, secs = divmod(secs, 3600)
    mins, secs = divmod(secs, 60)
    parts = []
    if days: parts.append(f"{days}d")
    if hrs: parts.append(f"{hrs}h")
    if mins: parts.append(f"{mins}m")
    parts.append(f"{secs}s")
    return ' '.join(parts)

# ----------------------------------------------------------------------------
# HTML rendering functions
# ----------------------------------------------------------------------------

def render_status_html(status: SystemStatus) -> str:
    lines = []
    from datetime import datetime
    now = datetime.now().strftime('%H:%M:%S')
    lines.append(f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</b>\n–í—Ä–µ–º—è: <code>{now}</code>")
    lines.append(f"CPU: <code>{status.cpu.percent:.1f}%</code>")
    lines.append(f"RAM: <code>{fmt_bytes(status.memory.used)}/{fmt_bytes(status.memory.total)} ({status.memory.percent:.1f}%)</code>")
    lines.append(f"Swap: <code>{fmt_bytes(status.swap.used)}/{fmt_bytes(status.swap.total)} ({status.swap.percent:.1f}%)</code>")
    if status.cpu_temp_c is not None:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        from modules.system_monitor import get_temperature_status
        emoji, temp_status = get_temperature_status(status.cpu_temp_c)
        lines.append(f"CPU Temp: <code>{status.cpu_temp_c:.1f}¬∞C</code> {emoji} ({temp_status})")
    lines.append(f"Uptime: <code>{fmt_timedelta(status.uptime)}</code>")
    if status.logged_in_users:
        lines.append("Users: " + ", ".join(f"<code>{u}</code>" for u in status.logged_in_users))
    else:
        lines.append("Users: <i>none</i>")
    # disks
    if status.disks:
        lines.append("\n<b>–î–∏—Å–∫–∏:</b>")
        for d in status.disks:
            lines.append(f"{d.mount}: <code>{fmt_bytes(d.used)}/{fmt_bytes(d.total)} ({d.percent:.1f}%)</code>")
    # os
    lines.append("\n<b>–°–∏—Å—Ç–µ–º–∞:</b>")
    lines.append(f"OS: <code>{status.os_name}</code>")
    lines.append(f"Kernel: <code>{status.kernel}</code>")
    return '\n'.join(lines)

def render_processes_html(processes: List[ProcessInfo]) -> str:
    if not processes:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö."
    
    lines = ["<b>üìà –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ä–µ—Å—É—Ä—Å–æ–≤:</b>"]
    for i, proc in enumerate(processes, 1):
        lines.append(f"{i}. <b>{proc.name}</b> (PID: {proc.pid})")
        lines.append(f"   CPU: <code>{proc.cpu_percent:.1f}%</code> | RAM: <code>{proc.memory_percent:.1f}%</code> | –°—Ç–∞—Ç—É—Å: <code>{proc.status}</code>")
    return '\n'.join(lines)

def render_docker_html(docker_info: DockerInfo) -> str:
    if docker_info.containers_total == 0:
        return "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤."
    
    lines = [f"<b>üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:</b>"]
    lines.append(f"–ó–∞–ø—É—â–µ–Ω–æ: <code>{docker_info.containers_running}/{docker_info.containers_total}</code>")
    
    if docker_info.containers:
        lines.append("\n<b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:</b>")
        for container in docker_info.containers:
            status_icon = "üü¢" if "Up" in container['status'] else "üî¥"
            lines.append(f"{status_icon} <b>{container['name']}</b>")
            lines.append(f"   –°—Ç–∞—Ç—É—Å: <code>{container['status']}</code>")
            lines.append(f"   –û–±—Ä–∞–∑: <code>{container['image']}</code>")
            if container['ports']:
                lines.append(f"   –ü–æ—Ä—Ç—ã: <code>{container['ports']}</code>")
            lines.append("")
    
    return '\n'.join(lines)

def render_network_html(network_info: NetworkInfo) -> str:
    lines = ["<b>üåê –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>"]
    lines.append(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: <code>{network_info.connections_count}</code>")
    
    if network_info.listening_ports:
        lines.append(f"–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º—ã–µ –ø–æ—Ä—Ç—ã: <code>{', '.join(map(str, network_info.listening_ports[:20]))}</code>")
        if len(network_info.listening_ports) > 20:
            lines.append(f"... –∏ –µ—â–µ {len(network_info.listening_ports) - 20} –ø–æ—Ä—Ç–æ–≤")
    
    if network_info.interface_stats:
        lines.append("\n<b>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:</b>")
        for interface, stats in network_info.interface_stats.items():
            lines.append(f"<b>{interface}:</b>")
            lines.append(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <code>{fmt_bytes(stats['bytes_sent'])}</code>")
            lines.append(f"   –ü–æ–ª—É—á–µ–Ω–æ: <code>{fmt_bytes(stats['bytes_recv'])}</code>")
    
    return '\n'.join(lines)

def render_services_html(services_output: str, max_lines: int = 40) -> str:
    if not services_output.strip():
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤."
    
    lines = services_output.strip().splitlines()
    shown = lines[:max_lines]
    if len(lines) > max_lines:
        shown.append(f"... ({len(lines)-max_lines} —Å—Ç—Ä–æ–∫ —Å–∫—Ä—ã—Ç–æ)")
    
    return "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã</b>\n<pre>" + "\n".join(shown) + "</pre>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∫–æ–º–∞–Ω–¥–æ–π /service ..."

def render_help_html() -> str:
    return textwrap.dedent(
        """
        <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>
        /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
        /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
        /services - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (systemd)
        /processes - –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ä–µ—Å—É—Ä—Å–æ–≤
        /docker - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
        /network - –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        /temp - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã (CPU, GPU, RAM –∏ –¥—Ä.)
        /restart - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        /shutdown - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        /update - apt update && upgrade (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        /ip - –ü—É–±–ª–∏—á–Ω—ã–π IP —Å–µ—Ä–≤–µ—Ä–∞
        /service &lt;action&gt; &lt;name&gt; - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º (start|stop|restart). –ü—Ä–∏–º–µ—Ä: /service restart nginx
        /dockerctl &lt;action&gt; &lt;container&gt; - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker (start|stop|restart|logs). –ü—Ä–∏–º–µ—Ä: /dockerctl restart nginx
        """
    ).strip()

def render_command_result_html(action: str, target: str, rc: int, output: str, error: str) -> str:
    if rc == 0:
        prefix = "‚úÖ –£—Å–ø–µ—Ö"
    else:
        prefix = f"‚ùå –û—à–∏–±–∫–∞ rc={rc}"
    
    content = (output or error).strip()[:4000]
    return f"{prefix} –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {action} {target}.\n<pre>{content}</pre>"

def render_temperature_html(temp_info: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –¥–ª—è Telegram
    """
    from datetime import datetime
    import html
    
    now = datetime.now().strftime('%H:%M:%S')
    
    lines = [f"<b>üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n–í—Ä–µ–º—è: <code>{now}</code>"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
    lines.append("\n<b>–õ–µ–≥–µ–Ω–¥–∞:</b>")
    lines.append("üü¢ &lt; 50¬∞C - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è")
    lines.append("üü° 50-70¬∞C - –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è")
    lines.append("üü† 70-85¬∞C - –≤—ã—Å–æ–∫–∞—è")
    lines.append("üî¥ &gt; 85¬∞C - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è")
    lines.append("")
    
    if temp_info.startswith("–û—à–∏–±–∫–∞"):
        lines.append(f"‚ùå {html.escape(temp_info)}")
    else:
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
        temp_lines = temp_info.strip().split('\n')
        for line in temp_lines:
            if ':' in line and '¬∞C' in line:
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –ø–æ–¥–ø–∏—Å—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                try:
                    temp_value = float(line.split(':')[1].replace('¬∞C', '').strip())
                    if temp_value < 50:
                        emoji = "üü¢"  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                        status = "–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è"
                    elif temp_value < 70:
                        emoji = "üü°"  # –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                        status = "–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è"
                    elif temp_value < 85:
                        emoji = "üü†"  # –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                        status = "–≤—ã—Å–æ–∫–∞—è"
                    else:
                        emoji = "üî¥"  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                        status = "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è"
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    safe_line = html.escape(line)
                    lines.append(f"{emoji} {safe_line} ({status})")
                except ValueError:
                    lines.append(f"üìä {html.escape(line)}")
            else:
                lines.append(f"üìä {html.escape(line)}")
    
    return '\n'.join(lines) 