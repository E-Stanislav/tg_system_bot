#!/usr/bin/env python3
"""
Background monitoring module for Telegram Remote Monitoring & Management Bot
"""

import asyncio
import logging
import shlex
from typing import Set

from aiogram import Bot

from core.config import (
    ADMIN_ID_INT, ALERT_CPU_THRESHOLD, ALERT_RAM_THRESHOLD, 
    ALERT_DISK_THRESHOLD, ALERT_SERVICES, ALERT_DOCKER_CONTAINERS,
    STATUS_SCHEDULE_SECONDS,
    ALERT_TEMP_THRESHOLD,
    TEMP_MONITOR_INTERVAL_SECONDS,
    TEMP_ALERT_HYSTERESIS,
)
from modules.system_monitor import (
    gather_system_status, get_top_processes, get_docker_info,
    run_command,
    get_thermal_zone_temperatures,
)
from modules.formatters import fmt_bytes, render_status_html
from modules.keyboards import kb_main_menu

logger = logging.getLogger("monitoring")

# ----------------------------------------------------------------------------
# Background monitoring and alerting
# ----------------------------------------------------------------------------

async def background_monitoring(bot: Bot):
    """–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    last_alerts = {"cpu": False, "ram": False, "disk": set(), "service": set()}
    
    while True:
        try:
            status = gather_system_status()
            
            # CPU alerts
            if status.cpu.percent > ALERT_CPU_THRESHOLD:
                if not last_alerts["cpu"]:
                    # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-5 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU
                    top_processes = get_top_processes(limit=5)
                    proc_lines = [
                        f"<b>{p.name}</b> (PID: {p.pid}) ‚Äî {p.cpu_percent:.1f}% CPU"
                        for p in top_processes if p.cpu_percent > 0.1
                    ] if top_processes else []
                    msg = f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: <b>{status.cpu.percent:.1f}%</b>"
                    if proc_lines:
                        msg += "\n\n–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU:\n" + "\n".join(proc_lines)
                    else:
                        msg += "\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π CPU."
                    await bot.send_message(
                        ADMIN_ID_INT,
                        msg
                    )
                    last_alerts["cpu"] = True
            else:
                last_alerts["cpu"] = False
            
            # RAM alerts
            if status.memory.percent > ALERT_RAM_THRESHOLD:
                if not last_alerts["ram"]:
                    await bot.send_message(
                        ADMIN_ID_INT, 
                        f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: <b>{status.memory.percent:.1f}%</b>"
                    )
                    last_alerts["ram"] = True
            else:
                last_alerts["ram"] = False
            
            # Disk alerts
            for d in status.disks:
                free_percent = 100.0 - d.percent
                if free_percent < ALERT_DISK_THRESHOLD:
                    if d.mount not in last_alerts["disk"]:
                        await bot.send_message(
                            ADMIN_ID_INT, 
                            f"‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ <b>{d.mount}</b>: "
                            f"<b>{fmt_bytes(d.used)}/{fmt_bytes(d.total)}</b> ({free_percent:.1f}% —Å–≤–æ–±–æ–¥–Ω–æ)"
                        )
                        last_alerts["disk"].add(d.mount)
                else:
                    last_alerts["disk"].discard(d.mount)
            
            # Service alerts
            for svc in ALERT_SERVICES:
                rc, out, err = await run_command(f"systemctl is-active {shlex.quote(svc)}")
                if rc != 0 or "inactive" in out or "failed" in out:
                    if svc not in last_alerts["service"]:
                        await bot.send_message(
                            ADMIN_ID_INT, 
                            f"‚ùóÔ∏è –í–∞–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å <b>{svc}</b> –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
                        )
                        last_alerts["service"].add(svc)
                else:
                    last_alerts["service"].discard(svc)
            
            # Docker container alerts
            docker_info = await get_docker_info()
            if docker_info.containers_total > 0:
                for container_name in ALERT_DOCKER_CONTAINERS:
                    container_found = False
                    for container in docker_info.containers:
                        if container['name'] == container_name:
                            container_found = True
                            if 'Up' not in container['status']:
                                if container_name not in last_alerts["service"]:
                                    await bot.send_message(
                                        ADMIN_ID_INT, 
                                        f"‚ùóÔ∏è –í–∞–∂–Ω—ã–π Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä <b>{container_name}</b> –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
                                    )
                                    last_alerts["service"].add(container_name)
                            else:
                                last_alerts["service"].discard(container_name)
                            break
                    if not container_found:
                        if container_name not in last_alerts["service"]:
                            await bot.send_message(
                                ADMIN_ID_INT, 
                                f"‚ùóÔ∏è –í–∞–∂–Ω—ã–π Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä <b>{container_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω!"
                            )
                            last_alerts["service"].add(container_name)
                            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≤ background_monitoring: {e}")
        
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# ----------------------------------------------------------------------------
# Background temperature overheat alerts
# ----------------------------------------------------------------------------

async def background_temperature_alerts(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –∏ —à–ª–µ—Ç –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä–µ–≤–µ.

    - –ü–æ—Ä–æ–≥: ALERT_TEMP_THRESHOLD (¬∞C)
    - –ò–Ω—Ç–µ—Ä–≤–∞–ª: TEMP_MONITOR_INTERVAL_SECONDS
    - –ì–∏—Å—Ç–µ—Ä–µ–∑–∏—Å: TEMP_ALERT_HYSTERESIS ‚Äî —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ø—Ä–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è—Ö
    """
    logger.info(
        "–ó–∞–ø—É—Å–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: –ø–æ—Ä–æ–≥=%.1f¬∞C, –∏–Ω—Ç–µ—Ä–≤–∞–ª=%ss, –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å=%.1f¬∞C",
        ALERT_TEMP_THRESHOLD, TEMP_MONITOR_INTERVAL_SECONDS, TEMP_ALERT_HYSTERESIS,
    )

    overheated_now: Set[str] = set()  # –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç

    while True:
        try:
            temps = get_thermal_zone_temperatures()
            if not temps:
                # –ù–µ—á–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –Ω–∞ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ ‚Äî —Å–ø–∏–º –¥–æ–ª—å—à–µ
                await asyncio.sleep(TEMP_MONITOR_INTERVAL_SECONDS)
                continue

            for component_name, temp_c in temps.items():
                if temp_c >= ALERT_TEMP_THRESHOLD:
                    if component_name not in overheated_now:
                        try:
                            await bot.send_message(
                                ADMIN_ID_INT,
                                (
                                    f"üî• –ü–µ—Ä–µ–≥—Ä–µ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ <b>{component_name}</b>: "
                                    f"<b>{temp_c:.1f}¬∞C</b> (–ø–æ—Ä–æ–≥ {ALERT_TEMP_THRESHOLD:.1f}¬∞C)"
                                ),
                            )
                            logger.info(
                                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∞–ª–µ—Ä—Ç: %s=%.1f¬∞C (–ø–æ—Ä–æ–≥=%.1f¬∞C)",
                                component_name, temp_c, ALERT_TEMP_THRESHOLD,
                            )
                        except Exception as e:
                            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ: %s", e)
                        overheated_now.add(component_name)
                else:
                    # –°–±—Ä–æ—Å –∞–ª–µ—Ä—Ç–∞, –∫–æ–≥–¥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ - –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å
                    if component_name in overheated_now and temp_c <= ALERT_TEMP_THRESHOLD - TEMP_ALERT_HYSTERESIS:
                        overheated_now.discard(component_name)
                        try:
                            await bot.send_message(
                                ADMIN_ID_INT,
                                (
                                    f"‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ <b>{component_name}</b> –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –Ω–æ—Ä–º—É: "
                                    f"<b>{temp_c:.1f}¬∞C</b>"
                                ),
                            )
                            logger.info(
                                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞: %s=%.1f¬∞C (–ø–æ—Ä–æ–≥=%.1f¬∞C, –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å=%.1f¬∞C)",
                                component_name, temp_c, ALERT_TEMP_THRESHOLD, TEMP_ALERT_HYSTERESIS,
                            )
                        except Exception as e:
                            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: %s", e)

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≤ background_temperature_alerts: {e}")

        await asyncio.sleep(TEMP_MONITOR_INTERVAL_SECONDS)

# ----------------------------------------------------------------------------
# Scheduled status reports
# ----------------------------------------------------------------------------

async def scheduled_status(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    while True:
        try:
            status = gather_system_status()
            await bot.send_message(
                ADMIN_ID_INT, 
                render_status_html(status), 
                reply_markup=kb_main_menu()
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≤ scheduled_status: {e}")
        
        await asyncio.sleep(STATUS_SCHEDULE_SECONDS) 