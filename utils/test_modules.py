#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

def test_config():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ config.py...")
    try:
        from core.config import BOT_TOKEN, ADMIN_ID_INT, DEFAULT_LOG_LEVEL
        print(f"   BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"   ADMIN_ID: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if ADMIN_ID_INT else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"   LOG_LEVEL: {DEFAULT_LOG_LEVEL}")
        return True
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_auth():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ auth.py...")
    try:
        from modules.auth import is_admin
        result = is_admin(123456789)
        print(f"   is_admin(123456789): {result}")
        return True
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_system_monitor():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ system_monitor.py...")
    try:
        from modules.system_monitor import gather_system_status, get_top_processes
        from modules.formatters import render_status_html
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = gather_system_status()
        print(f"   CPU: {status.cpu.percent:.1f}%")
        print(f"   RAM: {status.memory.percent:.1f}%")
        print(f"   Uptime: {status.uptime}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        processes = get_top_processes(3)
        print(f"   –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(processes)} –Ω–∞–π–¥–µ–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        html = render_status_html(status)
        print(f"   HTML —Å—Ç–∞—Ç—É—Å: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return True
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_formatters():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ formatters.py...")
    try:
        from modules.formatters import fmt_bytes, fmt_timedelta
        from datetime import timedelta
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
        size = 1024 * 1024 * 1024  # 1GB
        formatted = fmt_bytes(size)
        print(f"   fmt_bytes({size}): {formatted}")
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        uptime = timedelta(hours=2, minutes=30, seconds=45)
        formatted = fmt_timedelta(uptime)
        print(f"   fmt_timedelta({uptime}): {formatted}")
        
        return True
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_keyboards():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ keyboards.py...")
    try:
        from modules.keyboards import kb_main_menu, CBA
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menu = kb_main_menu()
        print(f"   –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ: {len(menu.inline_keyboard)} —Å—Ç—Ä–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –¥–∞–Ω–Ω—ã–µ
        print(f"   Callback –¥–∞–Ω–Ω—ã–µ: {list(CBA)}")
        
        return True
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_monitoring():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ monitoring.py...")
    try:
        from modules.monitoring import background_monitoring, scheduled_status
        print("   –§—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã")
        return True
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Telegram Bot\n")
    
    tests = [
        test_config,
        test_auth,
        test_system_monitor,
        test_formatters,
        test_keyboards,
        test_monitoring
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
        print("   - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: python3 bot.py")
        print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –≤ —Å–≤–æ–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö")
        print("   - –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ª—é–±–æ–≥–æ –º–æ–¥—É–ª—è")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")

if __name__ == "__main__":
    main() 